{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","count","setCount","password","setPassword","lowercase","split","uppercase","numbers","symbols","options","setOptions","editOptions","index","includes","filter","item","concat","option","className","onClick","navigator","clipboard","writeText","axis","x","xmin","xmax","onChange","type","checked","i","randomOptionIndex","Math","floor","random","length","generatePassword","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAuFeA,EAnFH,WACV,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAGMC,EAAY,6BAA6BC,MAAM,IAC/CC,EAAY,6BAA6BD,MAAM,IAC/CE,EAAU,aAAaF,MAAM,IAC7BG,EAAU,aAAaH,MAAM,IACnC,EAA8BN,mBAAS,YAAIK,IAA3C,mBAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAc,SAACC,GACL,IAAVA,IACEH,EAAQI,SAAR,MAAAJ,EAAO,YAAaH,IACtBI,EAAWD,EAAQK,QAAO,SAAAC,GAAI,OAAKT,EAAUO,SAASE,OAEtDL,EAAWD,EAAQO,OAAR,MAAAP,EAAO,YAAWH,MAGnB,IAAVM,IACEH,EAAQI,SAAR,MAAAJ,EAAO,YAAaF,IACtBG,EAAWD,EAAQK,QAAO,SAAAG,GAAM,OAAKV,EAAQM,SAASI,OAEtDP,EAAWD,EAAQO,OAAR,MAAAP,EAAO,YAAWF,MAGnB,IAAVK,IACEH,EAAQI,SAAR,MAAAJ,EAAO,YAAaD,IACtBE,EAAWD,EAAQK,QAAO,SAAAG,GAAM,OAAKT,EAAQK,SAASI,OAEtDP,EAAWD,EAAQO,OAAR,MAAAP,EAAO,YAAWD,OAenC,OACE,qBAAKU,UAAU,MAAf,SACE,sBAAKA,UAAU,QAAf,UACE,oDACc,KAAbhB,EACD,sBAAKgB,UAAU,WAAf,UACA,4BAAIhB,IACJ,wBAAQiB,QAAS,WAAOC,UAAUC,UAAUC,UAAUpB,IAAtD,qBACM,KACN,sBAAKgB,UAAU,QAAf,UACE,yCAAYlB,KACZ,cAAC,IAAD,CACEuB,KAAK,IACLC,EAAGxB,EACHyB,KAAM,EACNC,KAAM,GACNC,SAAU,gBAAGH,EAAH,EAAGA,EAAH,OAAWvB,EAASuB,SAGlC,sBAAKN,UAAU,UAAf,UACE,qBAAKA,UAAU,SAASC,QAAS,kBAAMR,EAAY,IAAnD,SACE,kCAAI,uBAAOiB,KAAK,WAAWC,QAASpB,EAAQI,SAAR,MAAAJ,EAAO,YAAaH,MAAxD,0BAEF,qBAAKY,UAAU,SAASC,QAAS,kBAAMR,EAAY,IAAnD,SACE,8BAAG,uBAAOiB,KAAK,WAAWC,QAASpB,EAAQI,SAAR,MAAAJ,EAAO,YAAaF,MAAvD,eAEF,qBAAKW,UAAU,SAASC,QAAS,kBAAMR,EAAY,IAAnD,SACE,8BAAG,uBAAOiB,KAAK,WAAWC,QAASpB,EAAQI,SAAR,MAAAJ,EAAO,YAAaD,MAAvD,kBAGJ,qBAAKU,UAAU,WAAf,SACE,wBAAQC,QAAS,kBAzCA,WAGvB,IAFA,IAAIjB,EAAW,GAEN4B,EAAI,EAAGA,EAAI9B,EAAO8B,IAAK,CAC9B,IAAMC,EAAoBC,KAAKC,MAAMD,KAAKE,SAAWzB,EAAQ0B,QAC7DjC,GAAYO,EAAQsB,GAEtB5B,EAAYD,GAkCiBkC,IAAvB,8BCpEKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e52ad576.chunk.js","sourcesContent":["import './App.css';\nimport React, {useState} from 'react';\nimport Slider from 'react-input-slider';\n\nconst App = () => {\n  const [count, setCount] = useState(9);\n  const [password, setPassword] = useState('');\n  \n\n  const lowercase = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n  const numbers = '0123456789'.split('');\n  const symbols = '!@#$%^&*()'.split('');\n  const [options, setOptions] = useState([...lowercase]);\n\n  const editOptions = (index) => {\n    if (index === 1) {\n      if (options.includes(...uppercase)) {\n        setOptions(options.filter(item => !uppercase.includes(item)));\n      } else {\n        setOptions(options.concat(...uppercase));\n      }\n    }\n    if (index === 2) {\n      if (options.includes(...numbers)) {\n        setOptions(options.filter(option => !numbers.includes(option)));\n      } else {\n        setOptions(options.concat(...numbers));\n      }\n    }\n    if (index === 3) {\n      if (options.includes(...symbols)) {\n        setOptions(options.filter(option => !symbols.includes(option)));\n      } else {\n        setOptions(options.concat(...symbols));\n      }\n    }\n  }\n\n  const generatePassword = () => {\n    let password = '';\n\n    for (let i = 0; i < count; i++) {\n      const randomOptionIndex = Math.floor(Math.random() * options.length);\n      password += options[randomOptionIndex];\n    }\n    setPassword(password);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className='inner'>\n        <h1>Password Generator</h1>\n        {password !== '' ?\n        <div className='password'>\n        <p>{password}</p>\n        <button onClick={() => {navigator.clipboard.writeText(password)}}>Copy</button>\n      </div>: null}\n        <div className='slide'>\n          <p>Length: {count}</p>\n          <Slider\n            axis=\"x\"\n            x={count}\n            xmin={9}\n            xmax={20}\n            onChange={({ x }) => setCount(x)}\n          />\n        </div>\n        <div className='options'>\n          <div className='option' onClick={() => editOptions(1)}>\n            <p> <input type='checkbox' checked={options.includes(...uppercase)}/> Uppercase Letters</p>\n          </div>\n          <div className='option' onClick={() => editOptions(2)}>\n            <p><input type='checkbox' checked={options.includes(...numbers)}/>Numbers</p>\n          </div>\n          <div className='option' onClick={() => editOptions(3)}>\n            <p><input type='checkbox' checked={options.includes(...symbols)}/>Symbols</p>\n          </div>\n        </div>\n        <div className='generate'>\n          <button onClick={() => generatePassword()}>Generate</button>\n        </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}